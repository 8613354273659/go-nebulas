// Copyright (C) 2017 go-nebulas authors
//
// This file is part of the go-nebulas library.
//
// the go-nebulas library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// the go-nebulas library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the go-nebulas library.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";

import "google/api/annotations.proto";
import "github.com/nebulasio/go-nebulas/core/pb/block.proto";

package rpcpb;

// RPC API interface.
service APIService {
	// Return the state of the neb.
	rpc GetNebState (GetNebStateRequest) returns (GetNebStateResponse) {
		option (google.api.http) = {
			get: "/v1/user/nebstate"
		};
	}

	// Return the p2p node info.
	rpc NodeInfo (NodeInfoRequest) returns (NodeInfoResponse) {
		option (google.api.http) = {
			get: "/v1/user/nodeinfo"
		};
	}

	// Return the dump info of blockchain.
	rpc BlockDump (BlockDumpRequest) returns (BlockDumpResponse) {
		option (google.api.http) = {
			post: "/v1/user/blockdump"
            body: "*"
		};
	}

	// Accounts return account list.
	rpc Accounts (AccountsRequest) returns (AccountsResponse) {
		option (google.api.http) = {
			get: "/v1/user/accounts"
		};
	}

	// Return the state of the account.
	rpc GetAccountState (GetAccountStateRequest) returns (GetAccountStateResponse) {
		option (google.api.http) = {
            post: "/v1/user/accountstate"
			body: "*"
        };
	}

	// Verify, sign, and send the transaction.
	rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse) {
		option (google.api.http) = {
            post: "/v1/user/transaction"
            body: "*"
        };
	}

	// Call smart contract.
	rpc Call (CallRequest) returns (SendTransactionResponse) {
		option (google.api.http) = {
            post: "/v1/user/call"
            body: "*"
        };
	}

	// Submit the signed transaction.
	rpc SendRawTransaction (SendRawTransactionRequest) returns (SendTransactionResponse) {
		option (google.api.http) = {
            post: "/v1/user/rawtransaction"
            body: "*"
        };
	}

	// Get block header info by the block hash.
	rpc GetBlockByHash (GetBlockByHashRequest) returns (corepb.Block) {
		option (google.api.http) = {
            post: "/v1/user/getBlockByHash"
            body: "*"
        };
	}

	// Get transactionReceipt info by tansaction hash.
	rpc GetTransactionReceipt (GetTransactionByHashRequest) returns (TransactionReceiptResponse) {
		option (google.api.http) = {
            post: "/v1/user/getTransactionReceipt"
            body: "*"
        };
	}

	rpc StatisticsNodeInfo (NodeInfoRequest) returns (StatisticsNodeInfoResponse) {
		option (google.api.http) = {
			get: "/v1/admin/statistics/nodeInfo"
		};
	}

	// NewAccount create a new account with passphrase
    rpc NewAccount(NewAccountRequest) returns (NewAccountResponse) {
        option (google.api.http) = {
            post: "/v1/admin/account/new"
            body: "*"
        };
    }

    // UnlockAccount unlock account with passphrase
    rpc UnlockAccount(UnlockAccountRequest) returns (UnlockAccountResponse) {
        option (google.api.http) = {
            post: "/v1/admin/account/unlock"
            body: "*"
        };
    }

    // LockAccount lock account
    rpc LockAccount(LockAccountRequest) returns (LockAccountResponse) {
        option (google.api.http) = {
            post: "/v1/admin/account/lock"
            body: "*"
        };
    }

    // SignTransaction sign transaction
    rpc SignTransaction(SignTransactionRequest) returns (SignTransactionResponse) {
        option (google.api.http) = {
            post: "/v1/admin/sign"
            body: "*"
        };
    }

    // SendTransactionWithPassphrase send transaction with passphrase
    rpc SendTransactionWithPassphrase(SendTransactionPassphraseRequest) returns (SendTransactionPassphraseResponse) {
        option (google.api.http) = {
            post: "/v1/admin/transactionWithPassphrase"
            body: "*"
        };
    }

}

// Request message of GetNebState rpc.
message GetNebStateRequest {
}

// Request message of NodeInfo rpc.
message NodeInfoRequest {

}

// Response message of node info.
message NodeInfoResponse {
	// the node ID.
	string id = 1;

	// the block chainID.
	uint32 chain_id  = 2;

	// the node version.
	uint32 version = 3;

	// Number of peers currenly connected.
	int32 peer_count = 4;

	// the node synchronized status.
	bool synchronized = 5;

	// the node route table bucket size.
	int32 bucket_size = 6;

	// the node relay cache size.
	int32 relay_cache_size = 7;

	// the node stream store size.
	int32 stream_store_size = 8;

	// the node stream store extend size.
	int32 stream_store_extend_size = 9;

	// the network protocol version.
	string protocol_version = 10;

	repeated RouteTable route_table = 11;
}

message StatisticsNodeInfoResponse {
	string NodeID = 1;
	uint64 Height = 2;
	string Hash = 3;
	uint32 PeerCount = 4;
}

message RouteTable {
	string id = 1;
	repeated string address = 2;
}

// Response message of GetNebState rpc.
message GetNebStateResponse {

	// Block chain id
	uint32 chain_id = 1;

	// Current neb tail hash
	string tail = 2;

	// Neb coinbase
	string coinbase = 3;

	// Number of peers currenly connected
	uint32 peer_count = 4;

	// Neb mine status, minging is true ,otherwise false
	bool is_mining = 5;

	// The current neb protocol version.
	string protocol_version = 6;

	// The peer sync status.
	bool synchronized = 7;
}

// Request message of Accounts rpc.
message AccountsRequest {
}

// Response message of Accounts rpc.
message AccountsResponse {
	// Account list
	repeated string addresses = 1;
}

// Request message of GetAccountState rpc.
message GetAccountStateRequest {
	// Hex string of the account addresss.
	string address = 1;

	// Hex string block number, or one of "latest", "earliest" or "pending". If not specified, use "latest".
	string block = 2;
}

// Response message of GetAccountState rpc.
message GetAccountStateResponse {
	// Current balance in unit of 1/(10^18) nas.
	string balance = 1; // uint128, len=16

	// Current transaction count.
	string nonce = 2;
}

// Request message of SendTransaction rpc.
message SendTransactionRequest {
	// Hex string of the sender account addresss.
	string from = 1;

	// Hex string of the receiver account addresss.
	string to = 2;

	// Amount of value sending with this transaction.
	string value = 3; // uint128, len=16

	// Transaction nonce.
	uint64 nonce = 4;

	// contract source code.
	string source = 5;

	// the params of contract.
	string args = 6;

	// gasPrice sending with this transaction.
	string gas_price = 7; // uint128, len=16

	// gasLimit sending with this transaction.
	string gas_limit = 8; // uint128, len=16
}

message CallRequest {
	// Hex string of the sender account addresss.
	string from = 1;

	// Hex string of the receiver account addresss.
	string to = 2;

	// Transaction nonce.
	uint64 nonce = 3;

	// call contract function name
	string function = 4;

	// the params of contract.
	string args = 5;

	// gasPrice sending with this transaction.
	string gas_price = 6; // uint128, len=16

	// gasLimit sending with this transaction.
	string gas_limit = 7; // uint128, len=16

	string value = 8;

}

// Request message of SendRawTransactionRequest rpc.
message SendRawTransactionRequest {

	// Signed data of transaction
	bytes data = 1;
}

// Response message of SendTransaction rpc.
message SendTransactionResponse {
	// Hex string of transaction hash.
	string txhash = 1;
	string contract_address = 2;
}

// Request message of GetBlockByHash rpc.
message GetBlockByHashRequest {
	// Hex string of block hash.
	string hash = 1;
}

// Request message of GetTransactionByHash rpc.
message GetTransactionByHashRequest {
	// Hex string of transaction hash.
	string hash = 1;
}

// Request message of BlockDump.
message BlockDumpRequest {
	// the count of blocks to dump before current tail.
	int32 count = 1;
}

// Response message of BlockDump.
message BlockDumpResponse {
	// block dump info.
	string data = 1;
}

// Response message of TransactionReceipt.
message TransactionReceiptResponse {

	// Hex string of tx hash.
	string hash = 1;

	// Hex string of the sender account addresss.
	string from = 2;

	// Hex string of the receiver account addresss.
	string to = 3;

	// Transaction nonce.
	uint64 nonce = 4;

	int64 timestamp = 5;

	string data = 6;

	uint32 chainId = 7;

	string contract_address = 8;

}

message NewAccountRequest {
    string passphrase = 1;
}

message NewAccountResponse {
    string address = 1;
}

message UnlockAccountRequest {
    string address = 1;
    string passphrase = 2;
}

message UnlockAccountResponse {
    bool result = 1;
}

message LockAccountRequest {
    string address = 1;
}

message LockAccountResponse {
    bool result = 1;
}

message SignTransactionRequest {
    // Hex string of the sender account addresss.
    string from = 1;

    // Hex string of the receiver account addresss.
    string to = 2;

    // Amount of value sending with this transaction.
    string value = 3; // uint128, len=16

    // Transaction nonce.
    uint64 nonce = 4;

    // contract source code.
    string source = 5;

    // the params of contract.
    string args = 6;

    // gasPrice sending with this transaction.
    string gas_price = 7; // uint128, len=16

    // gasLimit sending with this transaction.
    string gas_limit = 8; // uint128, len=16
}

message SignTransactionResponse {
    bytes data = 1;
}

message SendTransactionPassphraseRequest {
    // Hex string of the sender account addresss.
    string from = 1;

    // Hex string of the receiver account addresss.
    string to = 2;

    // Amount of value sending with this transaction.
    string value = 3; // uint128, len=16

    // Transaction nonce.
    uint64 nonce = 4;

    // contract source code.
    string source = 5;

    // the params of contract.
    string args = 6;

    // gasPrice sending with this transaction.
    string gas_price = 7; // uint128, len=16

    // gasLimit sending with this transaction.
    string gas_limit = 8; // uint128, len=16

    // from account passphrase
    string passphrase = 9;
}

message SendTransactionPassphraseResponse {
    // Hex string of transaction hash.
    string hash = 1;
}


